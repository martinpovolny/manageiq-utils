#!/bin/bash -x
set -e

echo "Reviewing pull-request $1"

#PID=$(lsof -t -i :4000 || true)
PID=$(lsof -i :4000 | grep ruby | sed -e 's/[\t ]\+/ /' | cut -d ' ' -f 2 || true)

if [ -n "$PID" ]; then
  echo "killing previous server instance $PID"
  kill $PID || true
fi

if [ "$2" != '--skip' ]; then
	echo 'Checking out ManageIQ master'
	cd ~/Projects/review/manageiq
	git reset --hard
	git fetch upstream && git checkout master && git merge upstream/master --ff-only

	echo 'Checking out ManageIQ UI master'
	cd ~/Projects/review/manageiq-ui-classic
	git reset --hard
	git fetch upstream && git checkout master && git merge upstream/master --ff-only

	echo 'Preparing ManageIQ master'
	cd ~/Projects/review/manageiq

	cp ~/Projects/templates/database.yml config/
	#echo 10 > REGION
	cp certs/v2_key.dev certs/v2_key
	bundle install
	./bin/update || true
else
	echo 'Preparing ManageIQ UI master'
	cd ~/Projects/review/manageiq-ui-classic

	git reset --hard
	git checkout master
	for remote in $(git remote | grep -vE 'upstream|origin'); do git remote rm $remote; done
	for branch in $(git branch -l | grep pull); do git branch -D $branch; done
fi

echo 'Fetching pull request'
~/bin/github-fetch-pullrequest $1

cd ~/Projects/review/manageiq
echo "Launching..."
nohup bundle exec rails s -b 0.0.0.0 -p 4000 &

while true; do
  sleep 10
  lsof -i :4000 && break
done

#xdg-open http://localhost:4000
google-chrome-stable http://localhost:4000 https://github.com/ManageIQ/manageiq-ui-classic/pull/$1

# memcached -l 0.0.0.0:11111 -d

echo "Done"
